# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

# Written by			: Nguyen Tu.
# Last modified			: 11.11.2017
	# Partition Tools	: https://www.aioboot.com/en/grub2-parttool-command/.
	# PartIMG Mapper	: https://www.aioboot.com/en/partimg-mapper/.
	# File Manager		: List files and directories, support for opening text files, ISO, PartIMG and partition images.
	# Find and boot Windows XP/7/8/8.1/10 installed on the HDD.
	#					: https://www.aioboot.com/en/boot-windows-grub2/.
	# Change language, background and font size.
	#					: https://www.aioboot.com/en/grub2-background-language-font-size/.
	# Search Grub2 & Syslinux configfile.
	# And much more		: https://www.aioboot.com.

insmod regexp

function escreturn {
	if [ -n "$1" ]; then echo; echo "$1"; fi
	echo
	echo -n "${escreturnl}"
	sleep -i -v 60
}

function esccont {
	if [ -n "$1" ]; then echo; echo "$1"; fi
	echo
	echo -n "${esccontl}"
	sleep -i -v 60
}

function escctrl {
	if keystatus --ctrl; then
		configfile ${prefix}/Main.cfg
	fi
}

function helpmenu {
	set pager=1
	echo -e "${1}\n"
	echo -e "${escreturnl}\n"
	sleep -i -v 999999
	set pager=0
}

function linuxefi {
	linux $@
}

function initrdefi {
	initrd $@
}

function WinLegacy {
	if [ x$scheme = xmsdos ] -o [ -n "$cd" ]; then
		ntldr /AIO/Tools/MS/bootmgr
	else
		configfile /AIO/Menu/WinLegacy.cfg
	fi
}
function WinUEFI {
	if [ -n "$cd" ]; then
		chainloader /EFI/CLOVER/tools/Shell64.efi
	else
		chainloader /EFI/Microsoft/Boot/boot${_SPEC_UEFI_ARCH}.efi
	fi
}

function booting {
	echo -e "${loadingiso} ${1}"
}

function beforeins {
	echo
	echo -e "${beforeins}"
	echo
	ls -l
	echo "${escctrll}"
	esccont
	escctrl
}

source ${prefix}/tools.cfg

function freebsd_ufs_variants {
	set device="$1"
	set fstype="$2"
	set uuid="$3"

	menuentry "FreeBSD ($fstype $device)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (single)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -s
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (verbose)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (no ACPI)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (safe mode)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.hint.apic.0.disabled=1
	    set kFreeBSD.hw.ata.ata_dma=0
	    set kFreeBSD.hw.ata.atapi_dma=0
	    set kFreeBSD.hw.ata.wc=0
	    set kFreeBSD.hw.eisa_slots=0
	    set kFreeBSD.hint.kbdmux.0.disabled=1
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
	    set root="$2"

	    kfreebsd /boot/loader
	}
}

function freebsd_zfs_variants {
	set device="$1"
	set fstype=zfs

	menuentry "FreeBSD ($fstype $device)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (single)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -s
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (verbose)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (no ACPI)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (safe mode)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.hint.apic.0.disabled=1
	    set kFreeBSD.hw.ata.ata_dma=0
	    set kFreeBSD.hw.ata.atapi_dma=0
	    set kFreeBSD.hw.ata.wc=0
	    set kFreeBSD.hw.eisa_slots=0
	    set kFreeBSD.hint.kbdmux.0.disabled=1
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
	    set root="$2"

	    kfreebsd /@/boot/loader
	}
}

function grub4dosroot {
	if [ -z "$cd" ]; then
		regexp -s 1:disknum -s 2:partn "(.*),${scheme}([0-9]+)" "$root"
		if [ "$partn" == "1" ]; then partn="0"
		elif [ "$partn" == "2" ]; then partn="1"
		elif [ "$partn" == "3" ]; then partn="2"
		elif [ "$partn" == "4" ]; then partn="3"
		elif [ "$partn" == "5" ]; then partn="4"
		elif [ "$partn" == "6" ]; then partn="5"
		elif [ "$partn" == "7" ]; then partn="6"
		elif [ "$partn" == "8" ]; then partn="7"
		elif [ "$partn" == "9" ]; then partn="8"
		elif [ "$partn" == "10" ]; then partn="9"
		fi
		set g4droot="(${disknum},${partn})"
		unset disknum
		unset partn
	else set g4droot="(${root})"; fi
}

function grub4dosdisk { regexp -s "$1" 'hd([0-9]+)' "$root"; }

function partimgentry {
	menuentry "${1}" "$1" {
		if strcontains "$2" " " ; then escreturn "${filenamespace}";
		else
			if ! test -d (hd0,msdos1); then partnum="0"
			elif ! test -d (hd0,msdos2); then partnum="1"
			elif ! test -d (hd0,msdos3); then partnum="2"
			elif ! test -d (hd0,msdos4); then partnum="3"
			fi
			if [ -z "$partnum" ]; then esccont "${fullpart}";
			else
				loopback loopimg "/AIO/Files/PartIMG/${2}"
				probe -f -s parttype loopimg
				if [ -z "$parttype" ]; then
					esccont
				else
					set fs="0x00"
					if [ "${parttype}" == "ntfs" ] -o [ "${parttype}" == "exfat" ]; then fs="0x07"
					elif [ "${parttype}" == "iso9660" ] -o [ "${parttype}" == "ext2" ] -o [ "${parttype}" == "xfs" ] -o [ "${parttype}" == "reiserfs" ]; then fs="0x83"
					elif [ "${parttype}" == "hfs" ] -o [ "${parttype}" == "hfsplus" ]; then fs="0xAF"
					elif [ "${parttype}" == "ufs1" ] -o [ "${parttype}" == "ufs2" ]; then
						fs="0xA5"
						if test -f (loopimg)/netbsd; then fs="0xA9"
						elif test -f (loopimg)/bsd; then fs="0xA6"
						fi
					elif [ "${parttype}" == "jfs" ]; then fs="0x35"
					fi
				fi
				loopback -d loopimg
				grub4dosdisk g4ddisk
				grub4dosroot
				set opt="debug off; root ${g4droot} > nul; /AIO/Tools/grub4dos/partnew.g4b ${g4ddisk},${partnum} ${fs} ${2} ${lang}"
				linux /AIO/grub.exe --config-file=${opt}
			fi
		fi
	}
	unset partnum
	unset parttype
	unset fs
}

function GetConfigFile {
	for file in "/boot/grub/grub.cfg" "/efi/boot/grub.cfg" "/EFI/BOOT/grub.cfg" "/EFI/BOOT/GRUB.CFG" "/EFI/boot/grub.cfg" "/BOOT/GRUB/GRUB.CFG" "/BOOT/GRUB/grub.cfg" "/BOOT/grub/grub.cfg" "/grub/grub.cfg"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				if test -d (${2})/boot/grub/${grub_cpu}-${grub_platform}; then set prefix="(${2})/boot/grub"; fi
				configfile $3
			}
		fi
	done
	for file in "/isolinux/isolinux.cfg" "/boot/isolinux/isolinux.cfg" "/isolinux/live.cfg" "/isolinux/install.cfg" "/isolinux.cfg" "/boot/i386/loader/isolinux.cfg" "/boot/x86_64/loader/isolinux.cfg" \
	"/ISOLINUX/ISOLINUX.CFG" "/BOOT/ISOLINUX/ISOLINUX.CFG" "/ISOLINUX/LIVE.CFG" "/ISOLINUX/INSTALL.CFG" "/ISOLINUX.CFG" "/BOOT/I386/LOADER/ISOLINUX.CFG" "/BOOT/X86_64/LOADER/ISOLINUX.CFG"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -i $3
			}
		fi
	done
	for file in "/boot/syslinux/syslinux.cfg" "/syslinux/syslinux.cfg" "/syslinux.cfg" "/arch/boot/syslinux/syslinux.cfg" "/isolinux/syslinux.cfg" "/slax/boot/syslinux.cfg" \
	"/BOOT/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX.CFG" "/ARCH/BOOT/SYSLINUX/SYSLINUX.CFG" "/ISOLINUX/SYSLINUX.CFG"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -s $3
			}
		fi
	done
}

function wimboot {
	echo "${loading} ${1}... ${plswait}".
	linux16		/AIO/Tools/MS/PXE/wimboot.x64 rawbcd
	initrd16	\
		newc:bootmgr:/AIO/Tools/MS/PXE/bootmgr			\
		newc:bootmgr.exe:/AIO/Tools/MS/PXE/bootmgr.exe	\
		newc:bcd:/AIO/Tools/MS/PXE/boot/bcd				\
		newc:segmono_boot.ttf:/AIO/Tools/MS/PXE/boot/fonts/segmono_boot.ttf		\
		newc:segoe_slboot.ttf:/AIO/Tools/MS/PXE/boot/fonts/segoe_slboot.ttf		\
		newc:segoen_slboot.ttf:/AIO/Tools/MS/PXE/boot/fonts/segoen_slboot.ttf	\
		newc:wgl4_boot.ttf:/AIO/Tools/MS/PXE/boot/fonts/wgl4_boot.ttf			\
		newc:boot.sdi:/AIO/Tools/MS/boot.sdi	\
		newc:boot.wim:"${1}"
}

function ListWimBoot {
	echo "${wimmessage}"
	for file in /AIO/Files/WinPE/*.wim /AIO/Files/WinPE/*.WIM /AIO/Files/WinPE/*/*.wim /AIO/Files/WinPE/*/*.WIM; do
		if ! test -f "$file"; then continue; fi
		regexp -s filename "/AIO/Files/WinPE/(.*)" "$file"
		if [ -z "$havefile" ]; then set havefile="1"; fi
		menuentry "${filename}" {
			wimboot "/AIO/Files/WinPE/${1}"
		}
	done
	if [ -z "$havefile" ]; then
		esccont "${nowim}"
	else
		unset havefile
		menuentry "${backcfg} [${press} B]" --hotkey=b {
			configfile ${prefix}/Main.cfg
		}
	fi
	unset filename
}

function WindowsDetect {
    set saved_root=$root
	for dev in (hd*,*); do
		regexp -s device '\((.*)\)' $dev
		if ! searchindevice "$device"; then continue; fi
		probe -s fstype -f $device
		if [ -z "$fstype" ] -o [ "$fstype" == "procfs" ]; then continue; fi
		probe -s tscheme -p $device
		if [ -n "$pc" ] -a [ "$tscheme" == "msdos" ]; then
			if test \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/BCD ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/BCD ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/BCD ')' \
				; then
				set root="$device"
				ntldr /bootmgr
				boot
			elif test \
				   '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
				; then
				set root="$device"
				regexp -s devnum 'hd([0-9]+)' $root
				if test "$devnum" != "0"; then drivemap -s hd0 $root; fi
				ntldr /ntldr
				boot
			fi
		elif [ -n "$efi" ] -a [ "$fstype" == "fat" ] -a [ "$tscheme" == "gpt" ] -a [ -f ($device)/EFI/Microsoft/Boot/bootmgfw.efi ] -a [ -f ($device)/EFI/Microsoft/Boot/BCD ]; then
			root="$device"
			chainloader /EFI/Microsoft/Boot/bootmgfw.efi
			boot
		fi
		unset tscheme
		unset fstype
    done
	set root=$saved_root
	escreturn "${nowindows}"
}

function ChangeBackground {
	echo "${bgmessage}"
	for file in ${prefix}/themes/*; do
		if ! test -f "$file"; then continue; fi
		if [ "$file" == "${prefix}/themes/${bg}" ]; then continue; fi
		regexp -s filename "/AIO/grub/themes/(.*)" "$file"
		if [ -z "$havefile" ]; then set havefile="1"; fi
		menuentry "${filename}" {
			bg="$1"
			background_image -m stretch "${prefix}/themes/${bg}"
			save_env bg
			configfile ${prefix}/Main.cfg
		}
	done
	if [ -z "$havefile" ]; then
		esccont "${nobg}"
	else
		unset havefile
		menuentry "${backcfg} [${press} B]" --hotkey=b {
			configfile ${prefix}/Main.cfg
		}
	fi
	unset filename
}

function ChangeLanguage {
	for langstr in "vi=Tiếng Việt" "en=English" "ast=Asturian; Bable; Leonese; Asturleonese" "ca=català" "zh_CN=中文 (Simplified)" "zh_TW=中文 (Traditional)" "da=dansk" "nl=Dutch" "en@arabic=English - Arabic"				\
					"en@cyrillic=English - Cyrillic" "en@greek=English - Greek" "en@hebrew=English - Hebrew" "en@piglatin=English - Piglatin" "en@quot=English - Quot"			\
					"eo=Esperanto" "fi=Finnish" "fr=français" "gl=Galego" "de=Deutsch" "de@hebrew=German - Hebrew" "de_CH=German - SWITZERLAND (CH)" "hu=magyar"				\
					"hr=hrvatski jezik" "id=Bahasa Indonesia" "it=Italiano" "ja=日本語" "lt=lietuvių kalba" "nb=Norsk Bokmål" "no=Norwegian" "pl=Polish" "pt_BR=Português" "pa=Panjabi" "ru=русский" "sr=српски језик"	\
					"sl=Slovenian" "es=Español" "sv=Svenska" "tr=Türkçe" "uk=Українська"; do
		regexp -s 2:langname -s 1:langcode '(.*)=(.*)' "$langstr"
		if [ "$langcode" == "$lang" ] -o [ -z "$lang" -a "$langcode" == "en" ]; then continue; fi
		menuentry "${langname}" "$langcode" {
			lang="$2"
			save_env lang
			configfile ${prefix}/grub.cfg
		}
	done
	menuentry "${backcfg} [${press} B]" --hotkey=b {
		configfile ${prefix}/Main.cfg
	}
}

#function changeroot {
#	changeroot.cfg
#}

#function partimgmapper {
#	partimgmapper.cfg
#}

#function parttoolfunc {
#	parttool.cfg
#}

#function partimgpartition {
#	partimgpartition.cfg
#}

#function searchcfg {
#	searchcfg.cfg
#}

#function FileManager {
#	FileManager.cfg
#}