function escreturn {
	echo
	echo -n "${escreturnl}"
	sleep -i -v 60
}

function esccont {
	echo
	echo -n "${esccontl}"
	sleep -i 9999
}

function escctrl {
	if keystatus --ctrl; then
		configfile ${prefix}/Main.cfg
	fi
}

function linuxefi {
	linux $@
}

function initrdefi {
	initrd $@
}

function WinLegacy {
	if [ x$scheme = xmsdos ] -o [ "$cd" ]; then
		ntldr /AIO/Tools/MS/bootmgr
	else
		configfile /AIO/Menu/WinLegacy.cfg
	fi
}
function WinUEFI {
	if [ "$cd" ]; then
		chainloader /EFI/CLOVER/tools/Shell64.efi
	else
		chainloader /EFI/Microsoft/Boot/boot${_SPEC_UEFI_ARCH}.efi
	fi
}

function booting {
	echo -e "${loadingiso} ${1}"
}

function beforeins {
	echo
	echo -e "${beforeins}"
	echo
	ls -l
	echo "${escctrll}"
	esccont
	escctrl
}

source ${prefix}/tools.cfg

function changeroot {
	set saved_root=$root
	set saved_prefix=$prefix
	insmod regexp
	for dev in (*); do
		regexp -s device '\((.*)\)' $dev
		if searchindevice "$device" ; then
			probe -f -s fstype $device
			if [ $saved_root != $device ] -a [ "$fstype" ] -a [ -f ($device)/AIO/grub/grub.cfg ]; then
				probe -s vollabel -l $device
				probe -s voluuid -u $device
				if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
				menuentry "${device} - ${vollabel} - ${fstype} - ${voluuid}" $device {
					set root="$2"
					set prefix=($2)/AIO/grub
					configfile $prefix/grub.cfg
				}
				unset vollabel
				unset voluuid
			fi
			unset fstype
		fi
	done
	set root=$saved_root
	set prefix=$saved_prefix
	rmmod regexp
}
function partimgmapper {
	insmod regexp
    for file in /AIO/Files/PartIMG/*; do
		if ! test -f "$file"; then continue; fi
		
		regexp -s filename '/AIO/Files/PartIMG/(.*)' "$file"
		
		menuentry "${filename}" $file {
			if ! test -d (hd0,msdos1); then partnum="0"
			elif ! test -d (hd0,msdos2); then partnum="1"
			elif ! test -d (hd0,msdos3); then partnum="2"
			elif ! test -d (hd0,msdos4); then partnum="3"
			fi
			if [ -z "$partnum" ]; then
				echo "${fullpart}"
				echo "${escreturnl}"
				sleep -i -v 60
				configfile ${prefix}/partimg.cfg
			else
				loopback loopimg $2
				probe -f -s parttype loopimg
				if [ -z "$parttype" ]; then
					echo "${escreturnl}"
					sleep -i -v 60
					configfile ${prefix}/partimg.cfg
				else
					set fs="0x00"
					if [ "${parttype}" == "ntfs" ] -o [ "${parttype}" == "exfat" ]; then fs="0x07"
					elif [ "${parttype}" == "iso9660" ] -o [ "${parttype}" == "ext2" ] -o [ "${parttype}" == "xfs" ] -o [ "${parttype}" == "reiserfs" ]; then fs="0x83"
					elif [ "${parttype}" == "hfs" ] -o [ "${parttype}" == "hfsplus" ]; then fs="0xAF"
					elif [ "${parttype}" == "ufs1" ] -o [ "${parttype}" == "ufs2" ]; then
						fs="0xA5"
						if test -f (loopimg)/netbsd; then fs="0xA9"
						elif test -f (loopimg)/bsd; then fs="0xA6"
						fi
					elif [ "${parttype}" == "jfs" ]; then fs="0x35"
					fi
				fi
				loopback -d loopimg
				set opt="debug off; find --set-root ${2} > nul; /AIO/Tools/grub4dos/partnew.g4b ${partnum} ${fs} ${2}"
				linux /AIO/Tools/grub4dos/grub.exe --config-file=${opt}
			fi
		}
		unset filename
		unset parttype
		unset partnum
	done
	rmmod regexp
}
function parttoolfunc {
	insmod regexp
	for dev in (hd0,msdos*); do
		regexp -s device '\((.*)\)' $dev
		if searchindevice "$device" ; then
			probe -f -s fstype $device
			if [ -z "$fstype" ]; then continue; fi
			probe -s vollabel -l $device
			probe -s voluuid -u $device
			if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
			submenu "${device} - ${vollabel} - ${fstype} - ${voluuid}" $device {
				menuentry "[1] ${cancel}" --hotkey=1 {
					configfile ${prefix}/parttool.cfg
				}
				menuentry "[2] ${active}" $2 --hotkey=2 {
					parttool ${2} boot+
				}
				menuentry "[3] ${inactive}" $2 --hotkey=3 {
					parttool ${2} boot-
				}
				menuentry "[4] ${hide}" $2 --hotkey=4 {
					parttool ${2} hidden+
				}
				menuentry "[5] ${unhide}" $2 --hotkey=5 {
					parttool ${2} hidden-
				}
				if [ x$2 != x$root ] -a [ -f ($2)/AIO/grub/grub.cfg ]; then
					menuentry "[6] ${setroot}" $2 --hotkey=6 {
						set root="$2"
						set prefix=($2)/AIO/grub
						configfile $prefix/grub.cfg
					}
				fi
				if [ x$2 != x$root ] -a [ -n "$pc" ]; then 
					menuentry "[7] ${delete}" $2 --hotkey=7 {
						if [ "${2}" == "hd0,msdos1" ]; then partnum="0"
						elif [ "${2}" == "hd0,msdos2" ]; then partnum="1"
						elif [ "${2}" == "hd0,msdos3" ]; then partnum="2"
						elif [ "${2}" == "hd0,msdos4" ]; then partnum="3"
						fi
						set opt="debug off; partnew (hd0,${partnum}) 0 0 0 > nul; find --set-root /AIO/grub/i386-pc/core.img > nul && kernel /AIO/grub/i386-pc/core.img"
						linux /AIO/Tools/grub4dos/grub.exe --config-file=${opt}
					}
				fi
			}
			unset vollabel
			unset voluuid
			unset fstype
		fi
	done
	rmmod regexp
}
function GetConfigFile {
	for file in "/boot/grub/grub.cfg" "/efi/boot/grub.cfg" "/EFI/BOOT/grub.cfg" "/EFI/BOOT/GRUB.CFG" "/EFI/boot/grub.cfg" "/BOOT/GRUB/GRUB.CFG" "/BOOT/GRUB/grub.cfg" "/BOOT/grub/grub.cfg" "/grub/grub.cfg"; do
		if test -f ($device)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				if test -d (${2})/boot/grub/${grub_cpu}-${grub_platform}; then set prefix="(${2})/boot/grub"; fi
				configfile $3
			}
		fi
	done
	for file in "/isolinux/isolinux.cfg" "/boot/isolinux/isolinux.cfg" "/isolinux/live.cfg" "/isolinux/install.cfg" "/isolinux.cfg" "/boot/i386/loader/isolinux.cfg" "/boot/x86_64/loader/isolinux.cfg" \
	"/ISOLINUX/ISOLINUX.CFG" "/BOOT/ISOLINUX/ISOLINUX.CFG" "/ISOLINUX/LIVE.CFG" "/ISOLINUX/INSTALL.CFG" "/ISOLINUX.CFG" "/BOOT/I386/LOADER/ISOLINUX.CFG" "/BOOT/X86_64/LOADER/ISOLINUX.CFG"; do
		if test -f ($device)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -i $3
			}
		fi
	done
	for file in "/boot/syslinux/syslinux.cfg" "/syslinux/syslinux.cfg" "/syslinux.cfg" "/arch/boot/syslinux/syslinux.cfg" "/isolinux/syslinux.cfg" "/slax/boot/syslinux.cfg" \
	"/BOOT/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX.CFG" "/ARCH/BOOT/SYSLINUX/SYSLINUX.CFG" "/ISOLINUX/SYSLINUX.CFG"; do
		if test -f ($device)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -s $3
			}
		fi
	done
}
function partimgpartition {
    set saved_root=$root
    insmod regexp
    for dev in (*); do
	regexp -s device '\((.*)\)' $dev
	if [ "$saved_root" == "$device" ]; then continue; fi
	if searchindevice "$device" ; then
		probe -s fstype -f $device
		if [ "$saved_root" == "$device" ] -o [ -z "$fstype" ]; then continue; fi
		probe -s vollabel -l $device
		probe -s voluuid -u $device
		if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
		if test -f ($device)/Grub2.cfg; then
			menuentry "${device} - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				configfile /Grub2.cfg
			}
		elif test -f ($device)/boot/loader -a -f ($device)/boot/boot1.efi; then
			menuentry "FreeBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				if [ "$efi" ]; then
					chainloader /boot/boot1.efi
				else
					kfreebsd /boot/loader
				fi
			}
		elif test -f ($device)/netbsd; then
			menuentry "NetBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				knetbsd /netbsd
				insmod regexp
				knetbsd_module_elf /*/installation/miniroot/miniroot.kmod
			}
		elif test -f ($device)/bsd; then
			menuentry "OpenBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				kopenbsd /bsd
			}
		fi
		if test -f ($device)/boot/kernel.i386-pc -a -f ($device)/boot/initfs.i386-pc -a -f ($device)/rescue/livecd.squashfs -a \
		-f ($device)/boot/kernel.x86_64-efi -a -f ($device)/boot/initfs.x86_64-efi; then
			menuentry "Bitdefender ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" "$saved_root" {
				set root=$2
				configfile ($3)/AIO/grub/menuoff/bitdefenderpartimg.cfg
			}
		elif test -f ($device)/boot/grub/i386-pc/cfg/kav_menu.cfg; then
			menuentry "Kaspersky ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" "$saved_root" {
				set root=$2
				configfile ($3)/AIO/grub/menuoff/kasperskypartimg.cfg
			}
		fi
		GetConfigFile "$device" "$vollabel" "$fstype" "$voluuid"
		unset fstype
		unset vollabel
		unset voluuid
	fi
    done
	rmmod regexp
    set root=$saved_root
}
function searchcfg {
    set saved_root=$root
	set saved_prefix=$prefix
    insmod regexp
    for dev in (*); do
	regexp -s device '\((.*)\)' $dev
	if [ "$saved_root" == "$device" ]; then continue; fi
	if searchindevice "$device" ; then
		set root=$device
		probe -s fstype -f $device
		if [ -z "$fstype" ]; then continue; fi
		probe -s vollabel -l $device
		if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
		probe -s voluuid -u $device
		GetConfigFile "$device" "$vollabel" "$fstype" "$voluuid"
		unset fstype
		unset vollabel
		unset voluuid
	fi
    done
	rmmod regexp
    set root=$saved_root
	set prefix=$saved_prefix
	menuentry "${backcfg} [${press} B]" --hotkey=b {
		configfile ${prefix}/Main.cfg
	}
}