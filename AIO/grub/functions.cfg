function escreturn {
	if [ -n "$1" ]; then echo "$1"; fi
	echo
	echo -n "${escreturnl}"
	sleep -i -v 60
}

function esccont {
	if [ -n "$1" ]; then echo "$1"; fi
	echo
	echo -n "${esccontl}"
	sleep -i -v 60
}

function escctrl {
	if keystatus --ctrl; then
		configfile ${prefix}/Main.cfg
	fi
}

function helpmenu {
	set pager=1
	echo -e "${1}\n"
	echo -e "${escreturnl}\n"
	sleep -i -v 999999
	set pager=0
}

function linuxefi {
	linux $@
}

function initrdefi {
	initrd $@
}

function WinLegacy {
	if [ x$scheme = xmsdos ] -o [ -n "$cd" ]; then
		ntldr /AIO/Tools/MS/bootmgr
	else
		configfile /AIO/Menu/WinLegacy.cfg
	fi
}
function WinUEFI {
	if [ -n "$cd" ]; then
		chainloader /EFI/CLOVER/tools/Shell64.efi
	else
		chainloader /EFI/Microsoft/Boot/boot${_SPEC_UEFI_ARCH}.efi
	fi
}

function booting {
	echo -e "${loadingiso} ${1}"
}

function beforeins {
	echo
	echo -e "${beforeins}"
	echo
	ls -l
	echo "${escctrll}"
	esccont
	escctrl
}

source ${prefix}/tools.cfg

function freebsd_ufs_variants {
	set device="$1"
	set fstype="$2"
	set uuid="$3"

	menuentry "FreeBSD ($fstype $device)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (single)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -s
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (verbose)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (no ACPI)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (safe mode)" $device $uuid {
	    set root="$2"
	    set uuid="$3"

	    kfreebsd /boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.hint.apic.0.disabled=1
	    set kFreeBSD.hw.ata.ata_dma=0
	    set kFreeBSD.hw.ata.atapi_dma=0
	    set kFreeBSD.hw.ata.wc=0
	    set kFreeBSD.hw.eisa_slots=0
	    set kFreeBSD.hint.kbdmux.0.disabled=1
	    set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
	    kfreebsd_loadenv /boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
	    set root="$2"

	    kfreebsd /boot/loader
	}
}

function freebsd_zfs_variants {
	set device="$1"
	set fstype=zfs

	menuentry "FreeBSD ($fstype $device)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (single)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -s
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (verbose)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    set kFreeBSD.acpi_load=YES
	    set kFreeBSD.hint.acpi.0.disabled=0
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (no ACPI)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (safe mode)" $device {
	    set root="$2"

	    kfreebsd /@/boot/kernel/kernel -v
	    unset kFreeBSD.acpi_load
	    set kFreeBSD.hint.acpi.0.disabled=1
	    set kFreeBSD.loader.acpi_disabled_by_user=1
	    set kFreeBSD.hint.apic.0.disabled=1
	    set kFreeBSD.hw.ata.ata_dma=0
	    set kFreeBSD.hw.ata.atapi_dma=0
	    set kFreeBSD.hw.ata.wc=0
	    set kFreeBSD.hw.eisa_slots=0
	    set kFreeBSD.hint.kbdmux.0.disabled=1
	    kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
	    kfreebsd_module_elf /@/boot/kernel/zfs.ko
	    kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
	    probe -l -s name $root
	    set kFreeBSD.vfs.root.mountfrom=zfs:$name
	    kfreebsd_loadenv /@/boot/device.hints
	}

	menuentry "FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
	    set root="$2"

	    kfreebsd /@/boot/loader
	}
}
function grub4dosroot {
	regexp -s disknum 'hd([0-9]+)' "$root"
	regexp -s partn ".*,${scheme}([0-9]+)" "$root"
	#if [ -z "$partn" ]; then regexp -s partn '.*,gpt([0-9]+)' "$root"; fi
	if [ "$partn" == "1" ]; then partn="0"
	elif [ "$partn" == "2" ]; then partn="1"
	elif [ "$partn" == "3" ]; then partn="2"
	elif [ "$partn" == "4" ]; then partn="3"
	elif [ "$partn" == "5" ]; then partn="4"
	elif [ "$partn" == "6" ]; then partn="5"
	elif [ "$partn" == "7" ]; then partn="6"
	elif [ "$partn" == "8" ]; then partn="7"
	elif [ "$partn" == "9" ]; then partn="8"
	elif [ "$partn" == "10" ]; then partn="9"
	fi
	set g4droot="(hd${disknum},${partn})"
	unset disknum
	unset partn
}
function grub4dosdisk { regexp -s "$1" 'hd([0-9]+)' "$root"; }
function changeroot {
	set saved_root=$root
	set saved_prefix=$prefix
	for dev in (*); do
		regexp -s device '\((.*)\)' $dev
		if searchindevice "$device" ; then
			probe -f -s fstype $device
			if [ $saved_root != $device ] -a [ -n "$fstype" ] -a [ "$fstype" != "procfs" ] -a [ -f ($device)/AIO/grub/grub.cfg ]; then
				probe -s vollabel -l $device
				probe -s voluuid -u $device
				if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
				menuentry "${device} - ${vollabel} - ${fstype} - ${voluuid}" $device {
					set root="${2}"
					set prefix="(${2})/AIO/grub"
					configfile $prefix/grub.cfg
				}
				unset vollabel
				unset voluuid
			fi
			unset fstype
		fi
	done
	set root=$saved_root
	set prefix=$saved_prefix
}
function partimgentry {
	menuentry "${1}" "$1" {
		if strcontains "$2" " " ; then escreturn "${filenamespace}";
		else
			if ! test -d (hd0,msdos1); then partnum="0"
			elif ! test -d (hd0,msdos2); then partnum="1"
			elif ! test -d (hd0,msdos3); then partnum="2"
			elif ! test -d (hd0,msdos4); then partnum="3"
			fi
			if [ -z "$partnum" ]; then esccont "${fullpart}";
			else
				loopback loopimg "/AIO/Files/PartIMG/${2}"
				probe -f -s parttype loopimg
				if [ -z "$parttype" ]; then
					esccont
				else
					set fs="0x00"
					if [ "${parttype}" == "ntfs" ] -o [ "${parttype}" == "exfat" ]; then fs="0x07"
					elif [ "${parttype}" == "iso9660" ] -o [ "${parttype}" == "ext2" ] -o [ "${parttype}" == "xfs" ] -o [ "${parttype}" == "reiserfs" ]; then fs="0x83"
					elif [ "${parttype}" == "hfs" ] -o [ "${parttype}" == "hfsplus" ]; then fs="0xAF"
					elif [ "${parttype}" == "ufs1" ] -o [ "${parttype}" == "ufs2" ]; then
						fs="0xA5"
						if test -f (loopimg)/netbsd; then fs="0xA9"
						elif test -f (loopimg)/bsd; then fs="0xA6"
						fi
					elif [ "${parttype}" == "jfs" ]; then fs="0x35"
					fi
				fi
				loopback -d loopimg
				grub4dosdisk g4ddisk
				grub4dosroot
				set opt="debug off; root ${g4droot} > nul; /AIO/Tools/grub4dos/partnew.g4b ${g4ddisk},${partnum} ${fs} ${2} ${lang}"
				linux /AIO/grub.exe --config-file=${opt}
			fi
		fi
	}
	unset partnum
	unset parttype
	unset fs
}
function partimgmapper {
	for file in /AIO/Files/PartIMG/*; do
		if ! test -f "$file"; then continue; fi
		if [ "$file" == "/AIO/Files/PartIMG/PartIMG_ROOT.img" ]; then continue; fi
		regexp -s filename '/AIO/Files/PartIMG/(.*)' "$file"
		if [ -z "$havefile" ]; then set havefile="1"; fi
		partimgentry "$filename"
		unset filename
		unset parttype
	done
	if [ -z "$havefile" ]; then
		esccont "${nopartimg}"
	else
		unset havefile
	fi
	if test -e "/AIO/Files/PartIMG/PartIMG_ROOT.img"; then partimgentry "PartIMG_ROOT.img"; fi
}
function parttoolfunc {
	for dev in (hd0,msdos*); do
		regexp -s device '\((.*)\)' $dev
		if searchindevice "$device" ; then
			probe -f -s fstype $device
			if [ -z "$fstype" ] -o [ "$fstype" == "procfs" ]; then continue; fi
			probe -s vollabel -l $device
			probe -s voluuid -u $device
			if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
			submenu "${device} - ${vollabel} - ${fstype} - ${voluuid}" $device {
				menuentry "[1] ${cancel}" --hotkey=1 {
					configfile ${prefix}/parttool.cfg
				}
				menuentry "[2] ${active}" $2 --hotkey=2 {
					parttool ${2} boot+
				}
				menuentry "[3] ${inactive}" $2 --hotkey=3 {
					parttool ${2} boot-
				}
				menuentry "[4] ${hide}" $2 --hotkey=4 {
					parttool ${2} hidden+
				}
				menuentry "[5] ${unhide}" $2 --hotkey=5 {
					parttool ${2} hidden-
				}
				if [ x$2 != x$root ] -a [ -f ($2)/AIO/grub/grub.cfg ]; then
					menuentry "[6] ${setroot}" $2 --hotkey=6 {
						set root="${2}"
						set prefix="(${2})/AIO/grub"
						configfile $prefix/grub.cfg
					}
				fi
				if [ x$2 != x$root ]; then 
					menuentry "[7] ${delete}" $2 --hotkey=7 {
						parttool $2 type=0x00
						configfile ${prefix}/parttool.cfg
					}
				fi
			}
			unset vollabel
			unset voluuid
			unset fstype
		fi
	done
}
function GetConfigFile {
	for file in "/boot/grub/grub.cfg" "/efi/boot/grub.cfg" "/EFI/BOOT/grub.cfg" "/EFI/BOOT/GRUB.CFG" "/EFI/boot/grub.cfg" "/BOOT/GRUB/GRUB.CFG" "/BOOT/GRUB/grub.cfg" "/BOOT/grub/grub.cfg" "/grub/grub.cfg"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				if test -d (${2})/boot/grub/${grub_cpu}-${grub_platform}; then set prefix="(${2})/boot/grub"; fi
				configfile $3
			}
		fi
	done
	for file in "/isolinux/isolinux.cfg" "/boot/isolinux/isolinux.cfg" "/isolinux/live.cfg" "/isolinux/install.cfg" "/isolinux.cfg" "/boot/i386/loader/isolinux.cfg" "/boot/x86_64/loader/isolinux.cfg" \
	"/ISOLINUX/ISOLINUX.CFG" "/BOOT/ISOLINUX/ISOLINUX.CFG" "/ISOLINUX/LIVE.CFG" "/ISOLINUX/INSTALL.CFG" "/ISOLINUX.CFG" "/BOOT/I386/LOADER/ISOLINUX.CFG" "/BOOT/X86_64/LOADER/ISOLINUX.CFG"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -i $3
			}
		fi
	done
	for file in "/boot/syslinux/syslinux.cfg" "/syslinux/syslinux.cfg" "/syslinux.cfg" "/arch/boot/syslinux/syslinux.cfg" "/isolinux/syslinux.cfg" "/slax/boot/syslinux.cfg" \
	"/BOOT/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX/SYSLINUX.CFG" "/SYSLINUX.CFG" "/ARCH/BOOT/SYSLINUX/SYSLINUX.CFG" "/ISOLINUX/SYSLINUX.CFG"; do
		if test -f ($1)$file; then
			menuentry "Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" {
				set root=$2
				syslinux_configfile -s $3
			}
		fi
	done
}
function partimgpartition {
	set saved_root=$root
	for dev in (*); do
	regexp -s device '\((.*)\)' $dev
	if [ "$saved_root" == "$device" ]; then continue; fi
	if searchindevice "$device" ; then
		probe -s fstype -f $device
		if [ "$saved_root" == "$device" ] -o [ -z "$fstype" ] -o [ "$fstype" == "procfs" ]; then continue; fi
		probe -s vollabel -l $device
		probe -s voluuid -u $device
		if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
		if test -f ($device)/Grub2.cfg; then
			menuentry "${device} - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				configfile /Grub2.cfg
			}
		elif test -f ($device)/boot/loader -a -f ($device)/boot/boot1.efi; then
			if [ -n "$efi" ]; then
				menuentry "FreeBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
					set root=$2
					chainloader /boot/boot1.efi
				}	
			else
				submenu "FreeBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" "$fstype" "$voluuid" {
					if test "$3" = ufs1 -o "$3" = ufs2 -a \
					-e ($2)/boot/kernel/kernel -a \
					-e ($2)/boot/device.hints; then
						freebsd_ufs_variants $2 $3 $4
					elif test "$3" = zfs -a \
					-e ($2)/@/boot/kernel/kernel -a \
					-e ($2)/@/boot/device.hints; then
						freebsd_zfs_variants $2
					fi
				}
			fi
		elif test -f ($device)/netbsd; then
			menuentry "NetBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				knetbsd /netbsd
							knetbsd_module_elf /*/installation/miniroot/miniroot.kmod
			}
		elif test -f ($device)/bsd; then
			menuentry "OpenBSD ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" {
				set root=$2
				kopenbsd /bsd
			}
		fi
		if test -f ($device)/boot/kernel.i386-pc -a -f ($device)/boot/initfs.i386-pc -a -f ($device)/rescue/livecd.squashfs -a \
		-f ($device)/boot/kernel.x86_64-efi -a -f ($device)/boot/initfs.x86_64-efi; then
			menuentry "Bitdefender ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" "$saved_root" {
				set root=$2
				configfile ($3)/AIO/grub/menuoff/bitdefenderpartimg.cfg
			}
		elif test -f ($device)/boot/grub/i386-pc/cfg/kav_menu.cfg; then
			menuentry "Kaspersky ${on} (${device}) - ${vollabel} - ${fstype} - ${voluuid}" "$device" "$saved_root" {
				set root=$2
				configfile ($3)/AIO/grub/menuoff/kasperskypartimg.cfg
			}
		fi
		GetConfigFile "$device" "$vollabel" "$fstype" "$voluuid"
		unset fstype
		unset vollabel
		unset voluuid
	fi
    done
    set root=$saved_root
}
function searchcfg {
    for dev in (*); do
	regexp -s device '\((.*)\)' $dev
	if [ "$saved_root" == "$device" ]; then continue; fi
	if searchindevice "$device" ; then
		probe -s fstype -f $device
		if [ -z "$fstype" ] -o [ "$fstype" == "procfs" ]; then continue; fi
		probe -s vollabel -l $device
		if [ -z "$vollabel" ]; then set vollabel="${noname}"; fi
		probe -s voluuid -u $device
		GetConfigFile "$device" "$vollabel" "$fstype" "$voluuid"
		unset fstype
		unset vollabel
		unset voluuid
	fi
    done
}
insmod regexp